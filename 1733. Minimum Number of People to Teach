class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        int m = languages.length;
        Set<Integer>[] knows = new HashSet[m + 1];
        for (int i = 0; i < m; i++) {
            knows[i + 1] = new HashSet<>();
            for (int lang : languages[i]) {
                knows[i + 1].add(lang);
            }
        }
        Set<Integer> candidates = new HashSet<>();
        for (int[] f : friendships) {
            int u = f[0], v = f[1];
            boolean canCommunicate = false;
            for (int lang : knows[u]) {
                if (knows[v].contains(lang)) {
                    canCommunicate = true;
                    break;
                }
            }
            if (!canCommunicate) {
                candidates.add(u);
                candidates.add(v);
            }
        }
        
        if (candidates.isEmpty()) return 0;
        int[] freq = new int[n + 1];
        for (int person : candidates) {
            for (int lang : knows[person]) {
                freq[lang]++;
            }
        }
        int maxFreq = 0;
        for (int lang = 1; lang <= n; lang++) {
            maxFreq = Math.max(maxFreq, freq[lang]);
        }
        return candidates.size() - maxFreq;
    }
}
