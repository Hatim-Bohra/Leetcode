class Solution {
    public boolean canPartitionGrid(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        long total = 0;
        for (int[] row : grid) {
            for (int num : row) {
                total += num;
            }
        }
        if (total % 2 != 0) return false;

        long half = total / 2;
        long currSum = 0;
        for (int i = 0; i < m - 1; i++) {
            for (int j = 0; j < n; j++) {
                currSum += grid[i][j];
            }
            if (currSum == half) return true;
        }
        long[] columnSum = new long[n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                columnSum[j] += grid[i][j];
            }
        }
        currSum = 0;
        for (int j = 0; j < n - 1; j++) {
            currSum += columnSum[j];
            if (currSum == half) return true;
        }
        return false;
    }
}
