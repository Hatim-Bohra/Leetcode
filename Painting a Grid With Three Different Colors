class Solution {
    private static final int R = 1;
    private static final int G = 2;
    private static final int B = 4;
    private static final int mod = (int)1e9+7;   
    public int colorTheGrid(int m, int n) {
        int cnt = 3;
        for(int i = 0; i  < m - 1; i++)
            cnt *= 2;
        long[] perms = new long[cnt];
        Queue<Integer> queue = new LinkedList<>();
                
        queue.offer(R);
        queue.offer(G);
        queue.offer(B);
        int index = cnt;
        
        while(!queue.isEmpty()){
            int color  = queue.poll();
            if( color >=  1 << 3 * (m-1) )
                perms[--index] = color;
            else{
                   int nextcolors = 0x7^ (color & 0x7);
                   while(nextcolors > 0){
                       int nextcolor = nextcolors &(-nextcolors);
                       queue.add((color << 3) + nextcolor);
                       nextcolors &= (nextcolors - 1);
                    }
                }
        }
        int[] cur = new int[cnt];
        Arrays.fill(cur, 1);
        for(int col = 0; col < n-1; col++){
            int[] next = new int[cnt];
            
            for(int i = 0; i < cnt; i++){
                for(int j = 0; j < cnt; j++){
                    if((perms[i] & perms[j]) == 0)
                        next[j] = (next[j] + cur[i])%mod;
                }
            }
            cur = next;
        }
        int result = 0;
        for(int i = 0; i < cnt; i++)
            result = (result + cur[i]) % mod;
        return result;    
    }
}
